<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12">
            <h1 class=" text-center"><%= page_title %></h1>
            <p class="text-center">
                Use the groups to <strong>the left</strong> to view groups of STIX and CybOX constructs. Edit the items within those groups to build your profile.
                <br/><br/>When you've finished, <button id="finalize-btn" class="btn btn-success btn-sm">finalize your profile!</button>
            </p>
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6 col-xs-offset-3">
            <div class="dropdown">
                <button class="btn btn-info dropdown-toggle btn-block btn-lg" type="button" id="groupDropdownButton" data-toggle="dropdown">
                    Profile Groups <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <% profile_modifying.each do |title, contents| %>
                        <li role="menuitem" tabindex="-1"><a href="#" class="group-accessor" data-target="<%= title.gsub(" ", "_") %>"><%= title %></a></li>
                    <% end %>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <% profile_modifying.each do |title, contents| %>
                <div id="<%= title.gsub(' ', '_') %>" style="display: none;" data-root-key="<%= title %>">
                    <h2 class="text-info"><%= title %></h2>
                    <% if contents.has_key?("constructs") %>
                        <span data-key="constructs">
                            <% contents['constructs'].each do |key, construct| %>
                                <%= render partial: "profile/shared/construct_group", locals: {construct: construct, key: key} %>
                            <% end %>
                        </span>
                    <% else # subgroups, so we need to put multiple  sections with items (used for CybOX Objects list) %>
                        <% contents.each do |subgroup_name, subgroup| %>
                            <h4 class="text-warning">
                                <%= subgroup_name %>
                                <small>
                                    <button id="group-btn-<%= subgroup_name.gsub(' ', '_') %>" class="btn btn-info btn-xs collapse-group-btn" data-toggle="collapse" data-target="span[data-key='<%= subgroup_name %>']"><span class="glyphicon glyphicon-plus"></span></button>
                                </small>
                            </h4>
                            <span class="group-section collapse" data-key="<%= subgroup_name %>">
                                <span data-key="constructs">
                                    <% subgroup['constructs'].each do |key, construct| %>
                                        <%= render partial: "profile/shared/construct_group", locals: {construct: construct, key: key} %>
                                    <% end %>
                                </span>
                            </span>
                        <% end %>
                    <% end %>
                </div>
            <% end %>
        </div>
    </div>
</div>

<script type="text/javascript">
    var active = undefined;
    var profile = JSON.parse('<%= profile_modifying.to_json.html_safe %>')
    $('.group-section').on('hide.bs.collapse show.bs.collapse', function () {
        var btn = $("#group-btn-" + $(this).attr("data-key").replace(/ /g, "_"));
        btn.toggleClass("btn-info");
        btn.toggleClass("btn-warning");
        var icon = btn.find(".glyphicon");
        icon.toggleClass("glyphicon-plus");
        icon.toggleClass("glyphicon-minus");
    });
    function getKeySet(currNode) {
        var keyset = [];
        while (!currNode.attr("data-root-key")) {
            if (currNode.attr("data-key")) {
                keyset.unshift({"key": currNode.attr("data-key"), "node" : currNode})
            } else if (currNode.attr("data-idx")) {
                keyset.unshift({"idx": currNode.attr("data-idx"), "node" : currNode})
            }
            currNode = currNode.parent();
        }
        keyset.unshift({"key": currNode.attr("data-root-key")});
        return keyset;
    }

    function setKey(keyset, value) {
        var idx = 0;
        var target = profile;
        while (idx < keyset.length - 1) {
            var currKey = keyset[idx];
            if (currKey.key) {
                target = target[currKey.key];
            } else {
                target = target[currKey.idx];
            }
            idx = idx + 1;
        }
        target[keyset[idx].key] = value;
    }

    $(".group-accessor").click(function() {
        if (active) {
            active.hide();
        }
        active = $("#" + this.getAttribute("data-target"));
        active.show();
    });
    $(".usage-selector").change(function(e) { // when a usage level is changed, update the row highlighting
        var parent = $(this).parent().parent();
        parent.removeClass();
        if (this.value === "<%= SchemaProfiler::USAGE_REQUIRED %>") {
            parent.addClass("success");
        } else if (this.value === "<%= SchemaProfiler::USAGE_SUGGESTED %>") {
            parent.addClass("info");
        } else if (this.value === "<%= SchemaProfiler::USAGE_OPTIONAL %>") {
            parent.addClass("warning");
        } else {
            parent.addClass("danger");
        }
        var myKeySet = getKeySet($(this));
        setKey(myKeySet, this.value);
    });
    $("#finalize-btn").click(function() {
        $.ajax({
            url: '/profile/upload',
            type: 'POST',
            data: {
                profile: JSON.stringify(profile),
                action: "create"
            },
            dataType: 'text'
        }).success(function() {
            window.location.href = "/profile/download"
        }).error(function() {
            alert("Error! Profile not created.");
        });
    });
</script>
