<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12">
            <h1 class=" text-center"><%= page_title %></h1>
            <p class="text-center">
                Use the dropdowns <strong>below</strong> to view groups of STIX and CybOX constructs.
                <br/>Edit the items within those groups to build your profile.
                <br/>When you've finished, finalize your profile!
                <br/><br/>
                <button id="finalize-btn" class="btn btn-success btn-xs">Save</button>
                <button id="excel-btn" class="btn btn-warning btn-xs">View as Excel</button>
            </p>
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6 col-md-3 col-md-offset-3 text-center">
            <label for="stix-selector"><h4>STIX Groups</h4></label>
            <select id="stix-selector" class="form-control group-accessor">
                <option value="choose" selected disabled="disabled">Select a group...</option>
                <% profile_modifying['groups'].select {|key, val| val['project'].downcase() == "stix"}.each do |group_name, group| %>
                    <option value="<%= group_name %>" data-target="<%= group_name.gsub(" ", "_") %>">
                        <%= group_name %>
                    </option>
                <% end %>
            </select>
        </div>
        <div class="col-xs-6 col-md-3 text-center">
            <label for="cybox-selector"><h4>CybOX Groups</h4></label>
            <select id="cybox-selector" class="form-control group-accessor">
                <option value="choose" selected disabled="disabled">Select a group...</option>
                <% profile_modifying['groups'].select {|key, val| val['project'].downcase() == "cybox"}.each do |group_name, group| %>
                    <option value="<%= group_name %>" data-target="<%= group_name.gsub(" ", "_") %>">
                        <%= group_name %>
                    </option>
                <% end %>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2">
            <% profile_modifying['groups'].each do |group_name, group_hash| %>
                <div id="<%= group_name.gsub(' ', '_') %>" style="display: none;">
                    <h2 class="text-info text-center" style="font-weight: 500;"><%= group_name %></h2>
                    <span>
                        <% group_hash['constructs'].each do |construct_name, construct_hash| %>
                            <%= render partial: "profile/shared/construct_group", locals: {group_name: group_name, construct_name: construct_name, construct: construct_hash } %>
                        <% end %>
                    </span>
                </div>
            <% end %>
        </div>
    </div>
</div>

<script type="text/javascript">
    var active = undefined;
    var profile = JSON.parse('<%= profile_modifying.to_json.html_safe %>')

    function setConstructUse(grpName, constrName, use) {
        profile['groups'][grpName]['constructs'][constrName]['use'] = use;
    }

    function setAttributeUse(grpName, constrName, attrName, idx, use) {
        var attr = profile['groups'][grpName]['constructs'][constrName]['attributes'][idx];
        if (attr['name'] === attrName) {
            attr['use'] = use;
        } else {
            console.log("Trying to update an attribute that isn't found!");
        }
    }

    function setFieldUse(grpName, constrName, fieldName, idx, use) {
        var field = profile['groups'][grpName]['constructs'][constrName]['fields'][idx];
        if (field['name'] === fieldName) {
            field['use'] = use;
        } else {
            console.log("Trying to update an field that isn't found!");
        }
    }

    $(".construct-usage-changer").click(function(evt) {
        evt.preventDefault();
        var thisEl = $(this);
        var newUse = thisEl.attr('data-usage');

        var master = thisEl.parent().parent();
        var constrName = master.attr('data-construct-name');
        var button = $("#" + constrName + "-use-changer");
        var buttonText = button.find(".use-info");

        var currUse = master.attr('data-construct-use');
        var groupName = master.attr('data-group-name');
        var className = currUse.toLowerCase().replace(/ /g, "-");
        buttonText.text(newUse);
        master.attr('data-construct-use', newUse)
        button.removeClass("btn-" + className);
        button.addClass("btn-" + newUse.toLowerCase().replace(/ /g, "-"));

        var table = $("#" + constrName.replace(/ /g, "-") + "-table");
        var tableSects = table.find("thead, tbody");
        var caption = table.find(".hidden-notice");
        if (newUse === "<%= SchemaProfiler::USAGE_MUST_NOT %>") {
            tableSects.hide();
            caption.show();
        } else {
            tableSects.show();
            caption.hide();
        }

        setConstructUse(groupName, constrName, newUse);
    });

    $(".group-accessor").change(function(e) {
        if (active) {
            active.hide();
        }
        var newId = "#" + this.value.replace(/ /g, "_").replace(/\./g, "\\.");
        active = $(newId);
        active.show();
        $(".group-accessor").find('option:first').attr('selected', 'selected');
    });

    $(".field-usage-selector, .attr-usage-selector").change(function(e) { // when a field/attr usage level is changed, update the row highlighting
        var newVal = this.value;
        var thisEl = $(this);
        var parent = thisEl.parent().parent(); // this should be the <tr> for the field or attr
        parent.removeClass();
        parent.addClass(this.value.toLowerCase().replace(/ /g, "-"));
        var groupName = thisEl.attr('data-group-name');
        var constName = thisEl.attr('data-construct-name');
        var idx = thisEl.attr('data-idx');
        if (thisEl.attr('data-attr-name') != null) {
            var attrName = thisEl.attr('data-attr-name');
            setAttributeUse(groupName, constName, attrName, idx, newVal);
        } else {
            var fieldName = thisEl.attr('data-field-name');
            setFieldUse(groupName, constName, attrName, idx, newVal);
        }
    });

    $("#finalize-btn").click(function() {
        $.ajax({
            url: '/profile/upload',
            type: 'POST',
            data: {
                profile: JSON.stringify(profile),
                action: "create"
            },
            dataType: 'text'
        }).success(function() {
            window.location.href = "/profile/download"
        }).error(function() {
            alert("Error! Profile not created.");
        });
    });

    $("#excel-btn").click(function() {
        $.ajax({
            url: '/profile/upload',
            type: 'POST',
            data: {
                profile: JSON.stringify(profile),
                action: "create"
            },
            dataType: 'text'
        }).success(function() {
            window.location.href = "/profile/download_excel"
        }).error(function() {
            alert("Error! Profile XLSX not created.");
        });
    });
</script>
