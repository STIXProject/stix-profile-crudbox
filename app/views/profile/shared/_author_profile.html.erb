<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12">
            <h1 class=" text-center"><%= page_title %></h1>
            <p class="text-center">
                Use the dropdowns <strong>below</strong> to view groups of STIX and CybOX constructs.
                <br/>Edit the items within those groups to build your profile.
                <br/>When you've finished, finalize your profile!
                <br/><br/>
                <button id="finalize-btn" class="btn btn-success btn-xs">Save</button>
                <button id="excel-btn" class="btn btn-warning btn-xs">View as Excel</button>
            </p>
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 text-center">
            <h3 class="text-primary">Profile Info</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-4 col-sm-offset-2 text-center">
            <div class="form-group">
                <label for="profile-name">Profile Name</label>
                <input type="text" class="form-control input-sm" id="profile-name" value="<%= profile_modifying['name'] %>">
            </div>
            <div class="form-group">
                <label for="profile-version">Profile Version</label>
                <input type="text" class="form-control input-sm" id="profile-version" value="<%= profile_modifying['version'] %>">
            </div>
            <div class="form-group">
                <label for="profile-stix-version">STIX Version</label>
                <input type="text" class="form-control input-sm" id="profile-stix-version" value="<%= profile_modifying['stix_version'] %>">
            </div>
        </div>
        <div class="col-xs-12 col-sm-4 text-center">
            <div class="form-group">
                <label for="profile-contact">Contact</label>
                <input type="text" class="form-control input-sm" id="profile-contact" value="<%= profile_modifying['contact'] %>">
            </div>
            <div class="form-group">
                <label for="profile-dist">Distribution</label>
                <input type="text" class="form-control input-sm" id="profile-dist" value="<%= profile_modifying['distribution'] %>">
            </div>
            <div class="form-group">
                <label for="profile-status">Status</label>
                <input type="text" class="form-control input-sm" id="profile-status" value="<%= profile_modifying['status'] %>">
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-8 col-sm-offset-2">
            <div class="form-group text-center">
                <label for="profile-name">Profile Description</label>
                <textarea rows="3" class="form-control input-sm" id="profile-desc"><%= profile_modifying['description'].strip %></textarea>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <h3 class="text-primary text-center">Profile Groups</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6 col-sm-3 col-sm-offset-3 text-center">
            <label for="stix-selector"><h4>STIX Groups</h4></label>
            <select id="stix-selector" class="form-control group-accessor">
                <option value="choose" selected disabled="disabled">Select a group...</option>
                <% profile_modifying['groups'].select {|key, val| val['project'].downcase() == "stix"}.each do |group_name, group| %>
                    <option value="<%= group_name %>" data-target="<%= attributize(group_name) %>">
                        <%= group_name %>
                    </option>
                <% end %>
            </select>
        </div>
        <div class="col-xs-6 col-sm-3 text-center">
            <label for="cybox-selector"><h4>CybOX Groups</h4></label>
            <select id="cybox-selector" class="form-control group-accessor">
                <option value="choose" selected disabled="disabled">Select a group...</option>
                <% profile_modifying['groups'].select {|key, val| val['project'].downcase() == "cybox"}.each do |group_name, group| %>
                    <option value="<%= group_name %>" data-target="<%= attributize(group_name) %>">
                        <%= group_name %>
                    </option>
                <% end %>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <% profile_modifying['groups'].each do |group_name, group_hash| %>
                <div data-group-safe-name="<%= attributize(group_name) %>" data-group-display-name="<%= group_name %>" style="display: none;">
                    <h2 class="text-primary text-center" style="font-weight: 500;">
                        <%= group_name %>
                    </h2>
                    <hr style="width: 50%" />
                    <% group_hash['constructs'].each do |construct_name, construct_hash| %>
                        <%= render partial: "profile/shared/construct_group", locals: {group_name: group_name, construct_name: construct_name, construct: construct_hash } %>
                    <% end %>
                </div>
            <% end %>
        </div>
    </div>
</div>

<script type="text/javascript">
    var active = undefined; // the 'active' group/schema being viewed and edited
    var profile = JSON.parse('<%= profile_modifying.to_json.html_safe %>')

    /**
     * Set the usage info for the construct named @constrName in @grpName.
     */
    function setConstructUse(grpName, constrName, use) {
        profile['groups'][grpName]['constructs'][constrName]['use'] = use;
    }

    /**
     * Set the usage info for an attribute named @attrName of @constrName in group @grpName.
     * @idx is the index of the attribute in the list of attributes on the construct.
     */
    function setAttributeUse(grpName, constrName, attrName, use) {
        var attr = profile['groups'][grpName]['constructs'][constrName]['attributes'][attrName];
        attr['use'] = use;
    }

    /**
     * Set the usage info for an field named @fieldName of @constrName in group @grpName.
     * @idx is the index of the field in the list of attributes on the construct.
     */
    function setFieldUse(grpName, constrName, fieldName, use) {
        var field = profile['groups'][grpName]['constructs'][constrName]['fields'][fieldName];
        field['use'] = use;
    }

    /**
     * Get the current usage setting of the construct named @constrName in group @grpName.
     */
    function getConstructUse(grpName, constrName) {
        return profile['groups'][grpName]['constructs'][constrName]['use'];
    }

    /**
     * jQuery handler for when the usage setting of a particular construct is changed.
     */
    $(".construct-usage-changer").click(function(evt) {
        evt.preventDefault(); // don't act like a link; we're handling this click
        var thisEl = $(this); // get this object as jQuery reference
        var groupDiv = thisEl.closest("div[data-group-safe-name]"); // group root div with groupname info
        var constrTable = thisEl.closest("table[data-construct-safe-name]"); // construct root table with constructname info
        var master = thisEl.parent().parent();
        var button = $(".construct-usage-dropdown", master.parent()); // find the dropdown button
        var buttonTextElem = button.find(".use-info");

        var groupRealName = groupDiv.attr('data-group-display-name'); // get group display name for this construct
        var constRealName = constrTable.attr('data-construct-display-name'); // get construct display name for this construct
        var groupName = groupDiv.attr('data-group-safe-name'); // get group name for this construct
        var constName = constrTable.attr('data-construct-safe-name'); // get construct name
        var currUse = getConstructUse(groupRealName, constRealName); // get current construct usage info
        var newUse = thisEl.attr('data-usage'); // get the value the construct usage is going to be set to

        buttonTextElem.text(newUse);
        //master.attr('data-construct-use', newUse)
        button.removeClass("btn-" + currUse.toLowerCase().replace(/ /g, "-"));
        button.addClass("btn-" + newUse.toLowerCase().replace(/ /g, "-"));

        var tableSects = constrTable.find("thead, tbody");
        var caption = constrTable.find(".hidden-notice");
        if (newUse === "<%= SchemaProfiler::USAGE_MUST_NOT %>") {
            tableSects.hide();
            caption.show();
        } else {
            tableSects.show();
            caption.hide();
        }

        setConstructUse(groupRealName, constRealName, newUse);
    });

    /**
     * jQuery handler for when a group of constructs (read: a schema group) is selected for viewing.
     */
    $(".group-accessor").change(function(e) {
        if (active) {
            active.hide();
        }
        var newId = "div[data-group-safe-name=" + $("option:selected", this).attr("data-target") + "]";
        active = $(newId);
        active.show();
        $(".group-accessor").find('option:first').attr('selected', 'selected');
    });

    /**
     * jQuery handlers for when a construct's field or attribute is changed.
     */
    $(".field-usage-selector, .attr-usage-selector").change(function(e) { // when a field/attr usage level is changed, update the row highlighting
        var thisEl = $(this);
        var groupDiv = thisEl.closest("div[data-group-safe-name]"); // group root div with groupname info
        var constrTable = thisEl.closest("table[data-construct-safe-name]"); // construct root table with constructname info
        var parent = thisEl.parent().parent(); // this should be the <tr> for the field or attr
        var newVal = this.value; // the new usage value

        var groupRealName = groupDiv.attr('data-group-display-name'); // get group display name for this construct
        var constRealName = constrTable.attr('data-construct-display-name'); // get construct display name for this construct
        var groupName = groupDiv.attr('data-group-safe-name');
        var constName = constrTable.attr('data-construct-safe-name');

        parent.removeClass();
        parent.addClass(newVal.toLowerCase().replace(/ /g, "-"));
        if (thisEl.attr('data-attr-name') != null) {
            var attrName = thisEl.attr('data-attr-name');
            setAttributeUse(groupRealName, constRealName, attrName, newVal);
        } else {
            var fieldName = thisEl.attr('data-field-name');
            setFieldUse(groupRealName, constRealName, fieldName, newVal);
        }
    });

    $("#finalize-btn").click(function() {
        profile['name'] = $("#profile-name").val();
        profile['version'] = $("#profile-version").val();
        profile['stix_version'] = $("#profile-stix-version").val();
        profile['contact'] = $("#profile-contact").val();
        profile['distribution'] = $("#profile-dist").val();
        profile['status'] = $("#profile-status").val();
        profile['description'] = $("#profile-desc").val();
        $.ajax({
            url: '/profile/upload',
            type: 'POST',
            data: {
                profile: JSON.stringify(profile),
                action: "create"
            },
            dataType: 'text'
        }).success(function() {
            window.location.href = "/profile/download"
        }).error(function() {
            alert("Error! Profile not created.");
        });
    });

    $("#excel-btn").click(function() {
        $.ajax({
            url: '/profile/upload',
            type: 'POST',
            data: {
                profile: JSON.stringify(profile),
                action: "create"
            },
            dataType: 'text'
        }).success(function() {
            window.location.href = "/profile/download_excel"
        }).error(function() {
            alert("Error! Profile XLSX not created.");
        });
    });
</script>
